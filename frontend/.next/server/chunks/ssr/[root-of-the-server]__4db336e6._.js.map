{"version":3,"sources":["turbopack:///[project]/src/services/api.ts","turbopack:///[project]/src/app/test-query/page.tsx"],"sourcesContent":["import axios from 'axios';\nimport type {\n  Project,\n  Task,\n  Brief,\n  DoD,\n  DecisionLog,\n  Review,\n  Sample,\n  KPIData,\n  Notification,\n  NotificationSettings,\n  NotificationStats,\n  NotificationStatus,\n  UnifiedSearchResponse,\n  SimilarProject,\n  DecisionPattern,\n  ContentSummary,\n  Template,\n  TemplateRecommendation,\n  BestPractice,\n  TemplateStats,\n  TemplateCategory,\n  TemplateType,\n  CreateProjectForm,\n  CreateTaskForm,\n  UpdateTaskStateForm,\n  CreateBriefForm,\n  User,\n  ProjectMember,\n  ProjectInvite,\n  ApprovalWorkflow,\n  ApprovalResponse,\n  TeamDecision,\n  DecisionVote,\n  DecisionComment,\n  DecisionStats,\n  UserWorkload,\n  UserRole,\n  SharePermission,\n  ApprovalStatus\n} from '@/types';\n\n// API 클라이언트 설정\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 에러 핸들링\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Projects API\nexport const projectsApi = {\n  getAll: () => apiClient.get<Project[]>('/projects'),\n  getById: (id: number) => apiClient.get<Project>(`/projects/${id}`),\n  create: (data: CreateProjectForm) => apiClient.post<Project>('/projects', data),\n  update: (id: number, data: Partial<Project>) => \n    apiClient.patch<Project>(`/projects/${id}`, data),\n  delete: (id: number) => apiClient.delete(`/projects/${id}`),\n};\n\n// Tasks API  \nexport const tasksApi = {\n  getAll: () => apiClient.get<Task[]>('/tasks'),\n  getById: (id: number) => apiClient.get<Task>(`/tasks/${id}`),\n  create: (data: CreateTaskForm) => apiClient.post<Task>('/tasks', data),\n  updateState: (id: number, data: UpdateTaskStateForm) =>\n    apiClient.patch<Task>(`/tasks/${id}/state`, data),\n  update: (id: number, data: Partial<Task>) =>\n    apiClient.patch<Task>(`/tasks/${id}`, data),\n  delete: (id: number) => apiClient.delete(`/tasks/${id}`),\n};\n\n// Briefs API\nexport const briefsApi = {\n  getAll: () => apiClient.get<Brief[]>('/briefs'),\n  getByTaskId: (taskId: number) => apiClient.get<Brief>(`/briefs/task/${taskId}`),\n  create: (data: CreateBriefForm) => apiClient.post<Brief>('/briefs', data),\n  update: (id: number, data: Partial<Brief>) =>\n    apiClient.patch<Brief>(`/briefs/${id}`, data),\n  delete: (id: number) => apiClient.delete(`/briefs/${id}`),\n};\n\n// DoD API\nexport const dodApi = {\n  getAll: () => apiClient.get<DoD[]>('/dod'),\n  getByTaskId: (taskId: number) => apiClient.get<DoD>(`/dod/task/${taskId}`),\n  create: (data: Partial<DoD>) => apiClient.post<DoD>('/dod', data),\n  update: (id: number, data: Partial<DoD>) =>\n    apiClient.patch<DoD>(`/dod/${id}`, data),\n  delete: (id: number) => apiClient.delete(`/dod/${id}`),\n};\n\n// Decisions API\nexport const decisionsApi = {\n  getAll: () => apiClient.get<DecisionLog[]>('/decisions'),\n  getByTaskId: (taskId: number) => apiClient.get<DecisionLog[]>(`/decisions/task/${taskId}`),\n  create: (data: Partial<DecisionLog>) => apiClient.post<DecisionLog>('/decisions', data),\n  updateDPlus7: (id: number, review: string) =>\n    apiClient.patch<DecisionLog>(`/decisions/${id}/dplus7`, { d_plus_7_review: review }),\n  delete: (id: number) => apiClient.delete(`/decisions/${id}`),\n};\n\n// Reviews API\nexport const reviewsApi = {\n  getAll: () => apiClient.get<Review[]>('/reviews'),\n  getByTaskId: (taskId: number) => apiClient.get<Review[]>(`/reviews/task/${taskId}`),\n  create: (data: Partial<Review>) => apiClient.post<Review>('/reviews', data),\n  update: (id: number, data: Partial<Review>) =>\n    apiClient.patch<Review>(`/reviews/${id}`, data),\n  delete: (id: number) => apiClient.delete(`/reviews/${id}`),\n};\n\n// Samples API\nexport const samplesApi = {\n  getAll: () => apiClient.get<Sample[]>('/samples'),\n  getByTaskId: (taskId: number) => apiClient.get<Sample[]>(`/samples/task/${taskId}`),\n  create: (data: Partial<Sample>) => apiClient.post<Sample>('/samples', data),\n  update: (id: number, data: Partial<Sample>) =>\n    apiClient.patch<Sample>(`/samples/${id}`, data),\n  delete: (id: number) => apiClient.delete(`/samples/${id}`),\n};\n\n// Dashboard API\nexport const dashboardApi = {\n  getKPIs: () => apiClient.get<KPIData>('/dashboard/kpi'),\n};\n\n// Exports API\nexport const exportsApi = {\n  exportProjectMd: (projectId: number) =>\n    apiClient.get<string>(`/exports/project/${projectId}/md`),\n};\n\n// Notifications API\nexport const notificationsApi = {\n  getAll: (status?: NotificationStatus, limit?: number) => {\n    const params = new URLSearchParams();\n    if (status) params.append('status', status);\n    if (limit) params.append('limit', limit.toString());\n    return apiClient.get<Notification[]>(`/notifications?${params.toString()}`);\n  },\n  getPending: () => apiClient.get<Notification[]>('/notifications/pending'),\n  generate: () => apiClient.post<{message: string; count: number}>('/notifications/generate'),\n  markRead: (id: number) => apiClient.patch<{message: string}>(`/notifications/${id}/mark-read`),\n  dismiss: (id: number) => apiClient.patch<{message: string}>(`/notifications/${id}/dismiss`),\n  getSettings: () => apiClient.get<NotificationSettings>('/notifications/settings'),\n  updateSettings: (settings: Partial<NotificationSettings>) => \n    apiClient.patch<{message: string; settings: NotificationSettings}>('/notifications/settings', settings),\n  getStats: () => apiClient.get<NotificationStats>('/notifications/stats'),\n};\n\n// Search API\nexport const searchApi = {\n  unified: (query: string, types?: string[], limit?: number) => {\n    const params = new URLSearchParams({ q: query });\n    if (types && types.length > 0) {\n      types.forEach(type => params.append('types', type));\n    }\n    if (limit) params.append('limit', limit.toString());\n    return apiClient.get<UnifiedSearchResponse>(`/search?${params.toString()}`);\n  },\n  similarProjects: (projectId: number, limit?: number) => {\n    const params = new URLSearchParams();\n    if (limit) params.append('limit', limit.toString());\n    return apiClient.get<{project_id: number; similar_projects: SimilarProject[]}>\n      (`/search/similar-projects/${projectId}?${params.toString()}`);\n  },\n  decisionPatterns: (query: string, limit?: number) => {\n    const params = new URLSearchParams({ q: query });\n    if (limit) params.append('limit', limit.toString());\n    return apiClient.get<{query: string; decision_patterns: DecisionPattern[]}>\n      (`/search/decision-patterns?${params.toString()}`);\n  },\n  projectSuggestions: (projectId: number) => \n    apiClient.get(`/search/suggestions/${projectId}`),\n  stats: () => apiClient.get<{\n    content_summary: ContentSummary;\n    search_capabilities: Record<string, string>;\n    supported_content_types: Array<{type: string; description: string}>;\n  }>('/search/stats'),\n};\n\n// Templates API\nexport const templatesApi = {\n  getAll: (category?: TemplateCategory, templateType?: TemplateType, includeSystem?: boolean, includeAI?: boolean, limit?: number) => {\n    const params = new URLSearchParams();\n    if (category) params.append('category', category);\n    if (templateType) params.append('template_type', templateType);\n    if (includeSystem !== undefined) params.append('include_system', includeSystem.toString());\n    if (includeAI !== undefined) params.append('include_ai', includeAI.toString());\n    if (limit) params.append('limit', limit.toString());\n    return apiClient.get<{templates: Template[]; total: number}>(`/templates?${params.toString()}`);\n  },\n  getById: (id: number) => apiClient.get<Template>(`/templates/${id}`),\n  getRecommended: (keywords: string, limit?: number) => {\n    const params = new URLSearchParams({ keywords });\n    if (limit) params.append('limit', limit.toString());\n    return apiClient.get<{keywords: string[]; recommendations: TemplateRecommendation[]}>\n      (`/templates/recommend?${params.toString()}`);\n  },\n  generateFromProject: (projectId: number) => \n    apiClient.post<{message: string; generated_templates: any[]}>(`/templates/generate-from-project/${projectId}`),\n  recordUsage: (templateId: number, usageData: any) => \n    apiClient.post(`/templates/${templateId}/use`, usageData),\n  getCategories: () => apiClient.get<{categories: Array<{value: TemplateCategory; label: string; description: string}>}>\n    ('/templates/categories/stats'),\n  getBestPractices: (category?: TemplateCategory, limit?: number) => {\n    const params = new URLSearchParams();\n    if (category) params.append('category', category);\n    if (limit) params.append('limit', limit.toString());\n    return apiClient.get<{best_practices: BestPractice[]; total: number}>\n      (`/templates/best-practices/?${params.toString()}`);\n  },\n  getStats: () => apiClient.get<{template_stats: TemplateStats; summary: any}>('/templates/stats/overview'),\n  initSystemTemplates: () => apiClient.post<{message: string}>('/templates/init-system-templates'),\n};\n\n// Collaboration API\nexport const collaborationApi = {\n  // 사용자 관리\n  createUser: (userData: {username: string; email: string; full_name?: string}) =>\n    apiClient.post<{user: User}>('/collaboration/users', userData),\n  \n  getUserProjects: (userId: number, includeShared: boolean = true) =>\n    apiClient.get<{user_id: number; projects: Project[]; total: number}>\n      (`/collaboration/users/${userId}/projects?include_shared=${includeShared}`),\n  \n  getUserWorkload: (userId: number, projectId?: number) => {\n    const params = new URLSearchParams();\n    if (projectId) params.append('project_id', projectId.toString());\n    return apiClient.get<{user_id: number; project_id?: number; workload: UserWorkload}>\n      (`/collaboration/users/${userId}/workload?${params.toString()}`);\n  },\n\n  // 프로젝트 공유\n  shareProject: (projectId: number, shareData: {\n    target_user_id?: number;\n    target_email?: string;\n    role: UserRole;\n    permissions: SharePermission;\n  }, ownerId: number) =>\n    apiClient.post<{message: string; invite: ProjectInvite}>\n      (`/collaboration/projects/${projectId}/share?owner_id=${ownerId}`, shareData),\n\n  acceptInvite: (inviteToken: string, userId: number) =>\n    apiClient.post<{message: string; membership: ProjectMember}>\n      (`/collaboration/invites/${inviteToken}/accept?user_id=${userId}`),\n\n  getProjectMembers: (projectId: number) =>\n    apiClient.get<{project_id: number; members: ProjectMember[]; total: number}>\n      (`/collaboration/projects/${projectId}/members`),\n\n  // 태스크 할당\n  assignTask: (taskId: number, assigneeId: number, assignerId: number) =>\n    apiClient.patch<{message: string; task: Task}>\n      (`/collaboration/tasks/${taskId}/assign?assigner_id=${assignerId}`, {assignee_id: assigneeId}),\n\n  // 승인 워크플로우\n  createApprovalWorkflow: (projectId: number, approvalData: {\n    title: string;\n    description: string;\n    approver_user_ids: number[];\n    required_approvers: number;\n    task_id?: number;\n    decision_id?: number;\n  }, requestedById: number) =>\n    apiClient.post<{message: string; workflow: ApprovalWorkflow}>\n      (`/collaboration/projects/${projectId}/approvals?requested_by_id=${requestedById}`, approvalData),\n\n  respondToApproval: (workflowId: number, responseData: {\n    is_approved: boolean;\n    comment?: string;\n  }, approverId: number) =>\n    apiClient.post<{message: string; response: ApprovalResponse}>\n      (`/collaboration/approvals/${workflowId}/respond?approver_id=${approverId}`, responseData),\n\n  getApprovalWorkflow: (workflowId: number) =>\n    apiClient.get<{workflow: ApprovalWorkflow; responses: ApprovalResponse[]}>\n      (`/collaboration/approvals/${workflowId}`),\n\n  // 팀 의사결정\n  createTeamDecision: (projectId: number, decisionData: {\n    title: string;\n    description: string;\n    options: string[];\n    task_id?: number;\n    is_voting_enabled: boolean;\n    voting_deadline?: string;\n    allow_multiple_votes: boolean;\n  }, createdById: number) =>\n    apiClient.post<{message: string; decision: TeamDecision}>\n      (`/collaboration/projects/${projectId}/decisions?created_by_id=${createdById}`, decisionData),\n\n  castVote: (decisionId: number, voteData: {\n    selected_options: string[];\n    reasoning?: string;\n  }, voterId: number) =>\n    apiClient.post<{message: string; vote: DecisionVote}>\n      (`/collaboration/decisions/${decisionId}/vote?voter_id=${voterId}`, voteData),\n\n  concludeDecision: (decisionId: number, conclusionData: {\n    final_decision: string;\n    decision_rationale?: string;\n  }, concluderId: number) =>\n    apiClient.patch<{message: string; decision: TeamDecision}>\n      (`/collaboration/decisions/${decisionId}/conclude?concluder_id=${concluderId}`, conclusionData),\n\n  addDecisionComment: (decisionId: number, commentData: {\n    content: string;\n    parent_comment_id?: number;\n  }, authorId: number) =>\n    apiClient.post<{message: string; comment: DecisionComment}>\n      (`/collaboration/decisions/${decisionId}/comments?author_id=${authorId}`, commentData),\n\n  getTeamDecision: (decisionId: number) =>\n    apiClient.get<{\n      decision: TeamDecision;\n      votes: DecisionVote[];\n      comments: DecisionComment[];\n      stats: DecisionStats;\n    }>(`/collaboration/decisions/${decisionId}`),\n\n  getDecisionStats: (decisionId: number) =>\n    apiClient.get<{decision_id: number; stats: DecisionStats}>\n      (`/collaboration/decisions/${decisionId}/stats`),\n};\n\nexport default apiClient;","'use client';\n\nimport { useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { tasksApi } from '@/services/api';\n\nexport default function TestQueryPage() {\n  const { data, isLoading, error, isError, isFetching, isSuccess } = useQuery({\n    queryKey: ['test-tasks'],\n    queryFn: async () => {\n      console.log('🔄 Starting API request...');\n      try {\n        const response = await tasksApi.getAll();\n        console.log('✅ API response received:', response.data);\n        return response.data;\n      } catch (err) {\n        console.error('❌ API request failed:', err);\n        throw err;\n      }\n    },\n    staleTime: 0,\n    gcTime: 0,\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  useEffect(() => {\n    console.log('🏗️ Component render state:', {\n      isLoading,\n      isFetching,\n      isSuccess,\n      isError,\n      hasData: !!data,\n      error: error?.message || 'none'\n    });\n  }, [isLoading, isFetching, isSuccess, isError, data, error]);\n\n  if (isLoading) {\n    return <div className=\"p-4\">⏳ Loading tasks...</div>;\n  }\n\n  if (error) {\n    return <div className=\"p-4 text-red-500\">❌ Error: {String(error)}</div>;\n  }\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-xl font-bold mb-4\">✅ Test Query Results</h1>\n      <div className=\"mb-4\">\n        <p>Status: {isSuccess ? '✅ Success' : '⏳ Loading'}</p>\n        <p>Data count: {data?.length || 0}</p>\n      </div>\n      <pre className=\"bg-gray-100 p-4 rounded text-sm overflow-x-auto\">\n        {JSON.stringify(data, null, 2)}\n      </pre>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}